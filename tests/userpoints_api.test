<?php

class UserpointsTestCase extends DrupalWebTestCase {
  /**
   * Implementation of getInfo().
   */
  function getInfo() {
    return array(
      'name' => t('Userpoints API '),
      'description' => t('Tests the core API for proper inserts & updates to the database tables, 
			  moderation, expiration, as well as permission checks'),
      'group' => t('Userpoints'),
    );
  }

  /**
   * Implementation of setUp().
   */
  function setUp() {
    parent::setUp('userpoints');

    // Create an administrator account
    global $admin_user;
    $admin_user = $this->drupalCreateUser(array('admin userpoints'));

    // Create a standard Drupal account and log in as that person
    $non_admin_user = $this->drupalCreateUser();
    $this->drupalLogin($non_admin_user);
  }


  /**
   *
   */
  function testBasicCall() {
    global $user;
    $points = (int) rand(1, 500);
    $sumpoints = $points;

    //NOTE: increment max points with all positive point changes, tests userpoints_get_max_points 
    $maxpoints = $points;

    //Test the a basic API call
    $return = userpoints_userpointsapi($points);
    $this->assertTrue($return['status'] == TRUE , t('API responded with successful grant of points'));

    //Check the database to ensure the point were properly saved
    $sql = "SELECT points from {userpoints_txn} WHERE uid = %d AND points = %d";
    $db_points = (int) db_result(db_query($sql, $user->uid, $points));
    $this->assertTrue($db_points === $points, t('Successfully verified points in the txn table'));

    //Check that the transaction table and the summary table match
    $sql = "SELECT SUM(points) FROM {userpoints_txn} WHERE uid = %d";
    $txn_points = (int) db_result(db_query($sql, $user->uid));
    $sql = "SELECT SUM(points) from {userpoints} WHERE uid = %d";
    $up_points = (int) db_result(db_query($sql, $user->uid));
    $this->assertTrue($txn_points === $up_points, t('Sum of transactions match total points for user'));
  
    //Add negative points to the initial value and check the values    
    $points = -rand(1, 500); 
    $sumpoints = $sumpoints + $points; 
    userpoints_userpointsapi($points); 
   
    //Check the database to ensure the negative point value was properly saved
    $sql = "SELECT points from {userpoints_txn} WHERE uid = %d AND points = %d";
    $db_points = (int) db_result(db_query($sql, $user->uid, $points));
    $this->assertTrue($db_points === $points, t('Successfully verified negative points in the txn table'));


    //Now test to make sure the transaction and and caching table stay in sync. 
    //Also test userpoints_get_max_points and userpoints_get_current_points
    for($i = 0; $i <= rand(1,50); $i++) {
      $points = rand(1, 500); 
      if (rand() & 1) {
        $points = - $points; 
      }
	    
	  if ($points > 0) { 
	    $maxpoints = $maxpoints + $points;	
	  }
      $sumpoints = $sumpoints + $points;
      userpoints_userpointsapi($points);       
    } 


    //Check the summary table to make sure everything is still kosher. 
    $sql = "SELECT SUM(points) FROM {userpoints_txn} WHERE uid = %d";
    $txn_points = (int) db_result(db_query($sql, $user->uid));
   
    $sql = "SELECT SUM(points) from {userpoints} WHERE uid = %d";
    $up_points = (int) db_result(db_query($sql, $user->uid));

    $this->assertTrue($txn_points === $up_points, t('Sum of transactions matches the caching table'));    
    $this->assertTrue($up_points === $sumpoints, 
                       t('Caching table matches testing code after !recs point records totaling !points points', 
                          array('!recs' => $i, '!points' => $sumpoints ))
                     );        
    $this->assertTrue($sumpoints == userpoints_get_current_points(), 
					  t("userpoints_get_current_points() returned correct point value")
					 );
    $this->assertTrue($maxpoints == userpoints_get_max_points(), 
					  t("userpoints_get_max_points() returned correct point value")
					 );


    //Remove all point entries to allow other tests to have a clean slate
	//removeallpoints();
  } 


  /**
   *
   */
  function testParamsArrayCall() {
    global $user;
    global $admin_user;

    $points = rand(); 
   
      //Assert that the use of a params array with simply points in it works. 
    $params = array(
	  'points' => $points,
    );
 
    $this->assertTrue(userpoints_userpointsapi($params) == TRUE, 
		     t('API call using a params array responded with successful grant of points')
		     );

      //Check the Database to make sure the points made it there 
    $sql = "SELECT points from {userpoints_txn} WHERE uid = %d AND points = %d";
    $db_points = db_result(db_query($sql, $user->uid, $points));
    $this->assertTrue($db_points == $points, t('Successfully verified points in the txn table'));

      //Test to ensure that calling it with no points returns false indicating an error
    $params = array(
	  'points' => '',
	);

    $return = userpoints_userpointsapi($params);
    $this->assertTrue($return['status'] == FALSE, 
                      t('API successfully prevented null points from being added'));

    $params = array(
	  'points' => 'abcd',
    );
    $return = userpoints_userpointsapi($params);
    $this->assertTrue($return['status'] == FALSE, 
		      t('API successfully prevented non-numeric points from being added')
		     );


    //Award points to admin user and test to ensure they were awarded to the correct user
    $params = array(
	  'points' => $points,
	  'uid' => $admin_user->uid,
    );
 
    $this->assertTrue(userpoints_userpointsapi($params) == TRUE, 
		     t('Successfully granted points to admin user')
		     );

      //Check the Database to make sure the points made it there 
    $sql = "SELECT points from {userpoints_txn} WHERE uid = %d AND points = %d";
    $db_points = db_result(db_query($sql, $admin_user->uid, $points));
    $this->assertTrue($db_points == $points, t('Successfully verified points in the txn table'));

   
    //Attempt to award points to a non-existent user 
    $sql = "SELECT uid FROM {users} ORDER BY uid DESC LIMIT 1"; 
    $nonuid = db_result(db_query($sql)) +1;
    $params = array(
	  'points' => $points,
	  'uid' => $nonuid,
    );
 
    $ret = userpoints_userpointsapi($params);
    $this->assertTrue($ret['status'] == FALSE, 
		     t('Successfully blocked points given to a non-existent user')
		     );

    //attempt to award points to a non-existent term
    $maxtid = "SELECT tid from {term_data} ORDER BY tid DESC LIMIT 1";
    $nontid =  db_result(db_query($sql)) +1;
    $params = array(
	  'points' => $points,
	  'uid' => $nontid,
    );

    $ret = userpoints_userpointsapi($params);
    $this->assertTrue($ret['status'] == FALSE, 
		     t('Successfully blocked points given to a non-existent tid')
		     );

    //Test various aspects of the API to ensure the DB is being updated successfully 
   $points = rand(1,500);
   $description = $this->randomName();
   $operation = $this->randomName();
   $params = array(
     'points' => $points,
     'description' => $description,
     'operation' => $operation
   );

   $ret = userpoints_userpointsapi($params);
   $sql =  "SELECT description, operation, reference FROM {userpoints_txn} WHERE description = '%s' AND operation = '%s'";
   $db_point_rec = db_fetch_array(db_query($sql, $description, $operation));
   $this->assertTrue($db_point_rec['description'] == $description, t('Point description successfully verified in DB'));
   $this->assertTrue($db_point_rec['operation'] == $operation, t('Point event successfully verified in DB'));
  }
 

 /**
   *
   */
  function testModeration() {
	
  }

  /**
   *
   */
  function testExpiration() {
	
  }
  /**
   *
   */
  function testPermissions() {
	
  }

  /**
   *
   */
  function testGetDefaultExpiryDate() {
	$date = userpoints_get_default_expiry_date();
	$this->assertTrue((is_number($date) && $date > 0), "Valid expiration date returned");
  }
  /**
   *
   */
  function testGetDefaultTid() {
	
  }
  /**
   *
   */
  function testGetDefaultVid() {
	
  }

  /**
   *
   */
  function testGetCategories() {
	$cats = userpoints_get_categories();
	$this->assertTrue(is_array($cats), 'Successfully verified userpoints_get_categories() returned an array');
  }


  function removeallpoints() {
	db_query("TRUNCATE table {userpoints}");
    db_query("TRUNCATE table {userpoints_txn}");
  }  
}

