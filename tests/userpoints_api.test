<?php

class UserpointsTestCase extends DrupalWebTestCase {
  /**
   * Implementation of getInfo().
   */
  function getInfo() {
    return array(
      'name' => t('Userpoints API '),
      'description' => t('Tests the core API for proper inserts & updates to the database tables, 
			  moderation, expiration, as well as permission checks'),
      'group' => t('Userpoints'),
    );
  }

  /**
   * Implementation of setUp().
   */
  function setUp() {
    parent::setUp('userpoints');

    // Create an administrator account
    global $admin_user;
    $admin_user = $this->drupalCreateUser(array('admin userpoints'));

    // Create a standard Drupal account and log in as that person
    $non_admin_user = $this->drupalCreateUser();
    $this->drupalLogin($non_admin_user);
  }


  /**
   *
   */
  function testBasicCall() {
    global $user;
    $points = (int) rand(1, 500);
    $sumpoints = $points;  

    //Test the a basic API call
    $return = userpoints_userpointsapi($points);
    $this->assertTrue($return['status'] == TRUE , t('API responded with successful grant of points'));

    //Check the database to ensure the point were properly saved
    $sql = "SELECT points from {userpoints_txn} WHERE uid = %d AND points = %d";
    $db_points = (int) db_result(db_query($sql, $user->uid, $points));
    $this->assertTrue($db_points === $points, t('Successfully verified points in the txn table'));

    //Check that the transaction table and the summary table match
    $sql = "SELECT SUM(points) FROM {userpoints_txn} WHERE uid = %d";
    $txn_points = (int) db_result(db_query($sql, $user->uid));
    $sql = "SELECT SUM(points) from {userpoints} WHERE uid = %d";
    $up_points = (int) db_result(db_query($sql, $user->uid));
    $this->assertTrue($txn_points === $up_points, t('Sum of transactions match total points for user'));
  
    //Add negative points to the initial value and check the values    
    $points = -rand(1, 500); 
    $sumpoints = $sumpoints + $points; 
    userpoints_userpointsapi($points); 
   
    //Check the database to ensure the negative point were properly saved
    $sql = "SELECT points from {userpoints_txn} WHERE uid = %d AND points = %d";
    $db_points = (int) db_result(db_query($sql, $user->uid, $points));
    $this->assertTrue($db_points === $points, t('Successfully verified negative points in the txn table'));


    //Now test to make sure the transaction and and caching table stay in sync. 
    for($i = 0; $i <= rand(1,50); $i++) {
      $points = rand(1, 500); 
      if (rand() & 1) {
        $points = - $points; 
      }
      $sumpoints = $sumpoints + $points;
      userpoints_userpointsapi($points);       
    } 

    //Check the summary table to make sure everything is still kosher. 
    $sql = "SELECT SUM(points) FROM {userpoints_txn} WHERE uid = %d";
    $txn_points = (int) db_result(db_query($sql, $user->uid));
   
    drupal_set_message("TXN POINTS = $txn_points");
    $sql = "SELECT SUM(points) from {userpoints} WHERE uid = %d";
    $up_points = (int) db_result(db_query($sql, $user->uid));

    drupal_set_message("UP POINTS = $up_points");

    $this->assertTrue($txn_points === $up_points, t('Sum of transactions matches the caching table'));    
    $this->assertTrue($up_points === $sumpoints, 
                       t('Caching table matches testing code after !recs point records totaling !points points', 
                          array('!recs' => $i, '!points' => $sumpoints ))
                     );        

    //Remove all point entries to allow other tests to have a clean slate
    db_query("TRUNCATE table {userpoints}");
    db_query("TRUNCATE table {userpoints_txn}");
  } 


  /**
   *
   */
  function testParamsArrayCall() {
    global $user;
    global $admin_user;

    $points = rand(); 
   
      //Assert that the use of a params array with simply points in it works. 
    $params = array(
	  'points' => $points,
    );
 
    $this->assertTrue(userpoints_userpointsapi($params) == TRUE, 
		     t('API call using a params array responded with successful grant of points')
		     );

      //Check the Database to make sure the points made it there 
    $sql = "SELECT points from {userpoints_txn} WHERE uid = %d AND points = %d";
    $db_points = db_result(db_query($sql, $user->uid, $points));
    $this->assertTrue($db_points == $points, t('Successfully verified points in the txn table'));

      //Test to ensure that calling it with no points returns false indicating an error
    $params = array(
	  'points' => '',
	);

    $return = userpoints_userpointsapi($params);
    $this->assertTrue($return['status'] == FALSE, 
                      t('API successfully prevented null points from being added'));

    $params = array(
	  'points' => 'abcd',
    );
    $return = userpoints_userpointsapi($params);
    $this->assertTrue($return['status'] == FALSE, 
		      t('API successfully prevented non-numeric points from being added')
		     );


    //Award points to admin user and test to ensure they were awarded to the correct user
    $params = array(
	  'points' => $points,
	  'uid' => $admin_user->uid,
    );
 
    $this->assertTrue(userpoints_userpointsapi($params) == TRUE, 
		     t('Successfully granted points to admin user')
		     );

      //Check the Database to make sure the points made it there 
    $sql = "SELECT points from {userpoints_txn} WHERE uid = %d AND points = %d";
    $db_points = db_result(db_query($sql, $admin_user->uid, $points));
    $this->assertTrue($db_points == $points, t('Successfully verified points in the txn table'));

   
    //Attempt to award points to a non-existent user 
    $sql = "SELECT uid FROM {users} ORDER BY uid DESC LIMIT 1"; 
    $nonuid = db_result(db_query($sql)) +1;
    $params = array(
	  'points' => $points,
	  'uid' => $nonuid,
    );
 
    $ret = userpoints_userpointsapi($params);
    $this->assertTrue($ret['status'] == FALSE, 
		     t('Successfully blocked points given to a non-existent user')
		     );


  }
 


 /**
   *
   */
  function testModeration() {
	
  }
  /**
   *
   */
  function testExpiration() {
	
  }
  /**
   *
   */
  function testPermissions() {
	
  }

  /**
   *
   */
  function testGetCurrentPoints() {
	
  }
  /**
   *
   */
  function testGetMaxPoints() {
	
  }
  /**
   *
   */
  function testGetDefaultExpiryDate() {
	
  }
  /**
   *
   */
  function testGetDefaultTid() {
	
  }
  /**
   *
   */
  function testGetDefaultVid() {
	
  }

  /**
   *
   */
  function testGetCategories() {
	
  }
}

