<?php
// $Id$

/**
 * @file
 * Rules integration for the user points module.
 */

/**
 * Implementation of hook_rules_action_info().
 */
function userpoints_rules_action_info() {
  return array(
    'userpoints_action_grant_points' => array(
      'label' => t('Grant !points to a user', userpoints_translation()),
      'arguments' => array(
         'user' => array('type' => 'user', 'label' => t('User'))
        ),
      'module' => 'Userpoints',
      'eval input' => array('points'),
    ),
  );
}

/**
 * Implementation of hook_rules_event_info().
 */
function userpoints_rules_event_info() {
  return array(
    'userpoints_event_points_awarded' => array(
       'label' => t('User was awarded !points', userpoints_translation()),
       'arguments' => array(
         'user' => array('type' => 'user', 'label' => t('Current User')),
         'points' => array('type' => 'points', 'label' => t('Points Awarded'))
        ),
       'module' => 'Userpoints',
    ),
  );
}

/**
 * Rules action - grant points to a user.
 */
function userpoints_action_grant_points($account, $settings) {
    userpoints_userpointsapi(array('uid' => $account->uid, 'points' => $settings['points']));
}

/**
 * Rules action form configuration - allow number of points to be set.
 */
function userpoints_action_grant_points_form($settings = array(), &$form) {
  $form['settings']['points'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of points'),
    '#default_value' => isset($settings['points']) ? $settings['points'] : '',
    '#description' => t('The number of !points to award. You may enter a negative number as-well', userpoints_translation())
  );
}

/**
 * Rules events -Trigger event when user points awarded.
 */
function userpoints_rules_userpoints($op, $params='') {
  switch ($op) {
  case 'points after':
    rules_invoke_event('userpoints_event_points_awarded', $params['uid'], $params['points']);
    break;
  }
}
