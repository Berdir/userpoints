<?php

//$Id$

// Copyright 2005 Khalid Baheyeldin http://2bits.com

function userpoints_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      $output = t('Users earn points as they post nodes, comments, and vote on nodes');
      break;
    case 'admin/settings/userpoints':
      $output = t('Users earn points as they post nodes, comments, and vote on nodes');
      break;
  }

  return $output;
}
  
function userpoints_menu($may_cache) {
  $items = array();

  $items[] = array(
    'path'     => '',
    'callback' => '',
    'title'    => t('userpoints view'),
    'access'   => user_access('view userpoints'),
    'type'     => MENU_CALLBACK);

   return $items;
}

function userpoints_perm() {
  return array ('view userpoints', 'use userpoints');
}

function userpoints_settings() {
  
  foreach (node_list() as $type => $module) {
    $name = node_invoke($type, 'node_name');
    $output .= form_textfield (t('Points for posting an %node-name', array('%node-name' => $name)),
      'userpoints_post_'. $type, variable_get('userpoints_post_'. $type, '1'), 5, 5);
  }

  $output .= form_textfield ('Points for posting a comment', 'userpoints_post_comment',
    variable_get('userpoints_post_comment', '1'), 5, 5);

  $output .= form_textfield ('Points for voting on a node', 'userpoints_nodevote',
    variable_get('userpoints_nodevote', '1'), 5, 5);

  $output .= form_textfield ('Points for inviting a user', 'userpoints_invite_invite',
    variable_get('userpoints_invite_invite', '1'), 5, 5);

  $output .= form_textfield ('Points when invited user registers', 'userpoints_invite_register',
    variable_get('userpoints_invite_register', '1'), 5, 5);

  $form = form_group(t('Points for each event'), $output);

  return $form;
}  

function userpoints_user($op) {
  global $user;

  switch($op) {
    case 'delete':
      db_query('DELETE FROM {userpoints} WHERE uid = %d', $user->uid);
      break;
  }
}

function userpoints_block($op = 'list', $delta = 0, $edit = array()) {

  global $user;

  $num = 5;

  $block_title = array();
  $block_title[] = t('User Points');
  $block_title[] = t('Highest Users');

  switch ($op) {
    case 'list':
      $blocks[0]['info'] = $block_title[0];
      $blocks[1]['info'] = $block_title[1];
      return $blocks;

    case 'view':
      if (user_access('view userpoints')) {
        switch ($delta) {
          case 0:
            $title = $block_title[$delta];
            if ($user->uid) {
              $points = (int) db_result(db_query('SELECT points FROM {userpoints} WHERE uid = %d', $user->uid));
              $content = t('You have %p %c', array('%p' => $points, '%c' => format_plural($points, 'point', 'points')));
            }
            else {
              $content = t('Points are visible to logged in users only');
            }
            break;

          case 1:
            $title = $block_title[$delta];
            $result = db_query_range('SELECT p.uid, u.name, p.points FROM {userpoints} p, {users} u WHERE u.uid = p.uid GROUP BY p.uid ORDER BY p.points DESC', 0, $num);
            while ($data = db_fetch_object($result)) {
              $rows[] =
                array(
                  array('data' => l($data->name, 'user/' . $data->uid)),
                  array('data' => $data->points, 'align' => 'right'));
            }
            $header = array(t('user'), t('points'));
            $content = theme('table', $header, $rows);
            break;
        }

        $block['subject'] = $title;
        $block['content'] = $content;

        return $block;
      }
  }
}

function userpoints_page() {
  $edit = $_POST['edit'];

  print theme('page', $o);
}

function userpoints_nodeapi(&$node, $op, $teaser, $page) {

  $points = variable_get('userpoints_post_' . $node->type, '1');
  switch($op) {
    case 'insert':
      $points = $points;
      _userpoints_update_points($points, "op=$op type=".$node->type);
      break;
    case 'delete':
      $points = -$points;
      _userpoints_update_points($points, "op=$op type=".$node->type, $node->user);
      break;
  }
}

function userpoints_comment($op, $comment) {
  $points = variable_get('userpoints_post_comment', '1');
  switch($op) {
    case 'insert':
      _userpoints_update_points($points, 'comment');
      break;
    case 'delete':
      $points = -$points;
      _userpoints_update_points($points, 'comment');
      break;
  }
}

function userpoints_nodevote($nid) {
  $points = variable_get('userpoints_nodevote', '1');
  _userpoints_update_points($points, 'nodevote');
}

function userpoints_invite($user, $op) {
  switch($op) {
    case 'invite':
      $points = variable_get('userpoints_invite_invite', '1');
      _userpoints_update_points($points, 'invite', $user);
      break;

    case 'register':
      $points = variable_get('userpoints_invite_register', '1');
      _userpoints_update_points($points, 'register', $user);
      break;
  }
}

function _userpoints_update_points($new_points = 0, $info = '', $orig_user = '') {
  global $user;

  if (isset($orig_user->uid)) {
    $real_user = $orig_user;
  }
  else {
    $real_user = $user;
  }

  $points = (int)$new_points + (int)_userpoints_get_current_points($real_user);

  if (_userpoints_user_exists($real_user)) {
    db_query("UPDATE {userpoints} SET points = '%d', last_update = '%d' WHERE uid = %d",
      $points, time(), $real_user->uid);
  }
  else {
    $result = db_query("INSERT INTO {userpoints} VALUES ('%d', '%d', '%d')",
      $real_user->uid, $points, time());
  }
}

function _userpoints_user_exists($user) {
  return (int)db_result(db_query('SELECT COUNT(*) FROM {userpoints} WHERE uid = %d', $user->uid));
}

function _userpoints_get_current_points($user) {
  return (int)db_result(db_query('SELECT points FROM {userpoints} WHERE uid = %d', $user->uid));
}

?>
