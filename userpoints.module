<?php

//$Id$

// Copyright 2005 Khalid Baheyeldin http://2bits.com

function userpoints_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      $output = t('Users earn points as they post nodes, comments, and vote on nodes');
      break;
    case 'admin/settings/userpoints':
      $output = t('Users earn points as they post nodes, comments, and vote on nodes');
      break;
  }

  return $output;
}
  
function userpoints_menu($may_cache) {
  $items = array();

  $items[] = array(
    'path'     => 'userpoints',
    'callback' => 'userpoints_list_users',
    'title'    => t('users by points'),
    'access'   => user_access('view userpoints'),
    'type'     => MENU_NORMAL_ITEM);

  $items[] = array(
    'path'     => 'admin/settings/userpoints/reset',
    'callback' => 'userpoints_reset',
    'title'    => t('Reset all user points'),
    'access'   => user_access('admin userpoints'),
    'type'     => MENU_CALLBACK);

   return $items;
}

function userpoints_perm() {
  return array ('view userpoints', 'use userpoints', 'admin userpoints');
}

function userpoints_reset() {
  if ($_POST['confirm']) {
    db_query('DELETE FROM {userpoints}');
    drupal_set_message(t('All user points have been reset'));
    $output = '';
  }
  else {
    $output = form(form_submit('Reset', 'confirm'));
  }
  print theme('page',$output);
}

function userpoints_settings() {
  foreach (node_list() as $type) {
    $name = node_invoke($type, 'node_name');
    $output .= form_textfield (t('Points for posting an %node-name', array('%node-name' => $name)),
      'userpoints_post_'. $type, variable_get('userpoints_post_'. $type, '1'), 5, 5);
  }

  $output .= form_textfield (t('Points for posting a comment'), 'userpoints_post_comment',
    variable_get('userpoints_post_comment', '1'), 5, 5);

  $output .= form_textfield (t('Points for moderating a comment'), 'userpoints_moderate_comment',
    variable_get('userpoints_moderate_comment', '1'), 5, 5);

  $output .= form_textfield (t('Points for voting on a node'), 'userpoints_nodevote',
    variable_get('userpoints_nodevote', '1'), 5, 5);

  $output .= form_textfield (t('Points for inviting a user'), 'userpoints_invite_invite',
    variable_get('userpoints_invite_invite', '1'), 5, 5);

  $output .= form_textfield (t('Points when invited user registers'), 'userpoints_invite_register',
    variable_get('userpoints_invite_register', '1'), 5, 5);

  $points = form_group(t('Points for each event'), $output);

  $output = form_radios(t('Use points as form of payment?'), 'userpoints_ec_payment',
    variable_get('userpoints_ec_payment', 0), array(t('Disable'), t('Enable')));

  $output .= form_textfield (t('Points multiplier for buying'), 'userpoints_ec_buy',
    variable_get('userpoints_ec_buy', 1), 5, 5);

  $output .= form_textfield (t('Points to get on selling (for every dollar)'), 'userpoints_ec_sell',
    variable_get('userpoints_ec_sell', 1), 5, 5);

  $output .= form_textfield (t('Minimum amount for purchase'), 'userpoints_min_purchase',
    variable_get('userpoints_min_purchase', '5.00'), 5, 5);

  $ecommerce = form_group(t('Ecommerce Options'), $output);

  $output = t('You can %s. This is useful in certain situations such as monthly contests.',
    array('%s'=> l( 'reset all user points', 'admin/settings/userpoints/reset')));

  $advanced = form_group(t('Advanced Options'), $output);

  $form = $points . $ecommerce . $advanced;

  return $form;
}  

function userpoints_user($op, &$edit, &$user, $category = '') {

  switch($op) {
    case 'delete':
      db_query('DELETE FROM {userpoints} WHERE uid = %d', $user->uid);
      break;
    case 'view':
      $points = (int) db_result(db_query('SELECT points FROM {userpoints} WHERE uid = %d', $user->uid));
      return array(t('Points') => form_item(t('Points'), $points));
      break;
  }
}

function userpoints_list_users() {
  
  $header = array(t('user'), t('points'));

  $result = db_query('SELECT p.uid, u.name, p.points FROM {userpoints} p, {users} u WHERE u.uid = p.uid GROUP BY p.uid ORDER BY p.points DESC', 30, 0, NULL);
  while ($data = db_fetch_object($result)) {
    $rows[] =
      array(
        array('data' => l($data->name, 'user/' . $data->uid)),
        array('data' => $data->points, 'align' => 'right'));
  }

  if ($pager = theme('pager', NULL, 30, 0)) {
    $rows[] = array(array('data' => $pager, 'colspan' => '2'));
  }

  print theme('page', theme('table', $header, $rows));

}

function userpoints_block($op = 'list', $delta = 0, $edit = array()) {

  global $user;

  $num = 5;

  $block_title = array();
  $block_title[] = t('User Points');
  $block_title[] = t('Highest Users');

  switch ($op) {
    case 'list':
      $blocks[0]['info'] = $block_title[0];
      $blocks[1]['info'] = $block_title[1];
      return $blocks;

    case 'view':
      if (user_access('view userpoints')) {
        switch ($delta) {
          case 0:
            $title = $block_title[$delta];
            if ($user->uid) {
              $points = (int) db_result(db_query('SELECT points FROM {userpoints} WHERE uid = %d', $user->uid));
              $content = t('You have %p %c', array('%p' => $points, '%c' => format_plural($points, 'point', 'points')));
            }
            else {
              $content = t('Points are visible to logged in users only');
            }
            break;

          case 1:
            $title = $block_title[$delta];
            $result = db_query_range('SELECT p.uid, u.name, p.points FROM {userpoints} p, {users} u WHERE u.uid = p.uid GROUP BY p.uid ORDER BY p.points DESC', 0, $num);
            while ($data = db_fetch_object($result)) {
              $rows[] =
                array(
                  array('data' => l($data->name, 'user/' . $data->uid)),
                  array('data' => $data->points, 'align' => 'right'));
            }
            $header = array(t('user'), t('points'));
            $content = theme('table', $header, $rows);
            break;
        }

        $block['subject'] = $title;
        $block['content'] = $content;

        return $block;
      }
  }
}

function userpoints_page() {
  $edit = $_POST['edit'];

  print theme('page', '');
}

function userpoints_nodeapi(&$node, $op, $teaser, $page) {

  $points = variable_get('userpoints_post_' . $node->type, '1');
  switch($op) {
    case 'insert':
      $points = $points;
      _userpoints_update_points($points, $node->uid, "op=$op type=".$node->type);
      break;
    case 'delete':
      $points = -$points;
      _userpoints_update_points($points, $node->uid, "op=$op type=".$node->type);
      break;
    case 'update':
      $orig_node = node_load(array('nid' => $node->nid));
      if ($node->uid != $orig_node->uid) {
        // subtract from the original node owner
        $points = -$points;
        _userpoints_update_points($points, $orig_node->uid, "op=$op type=".$node->type);

        // Add to the new node owner
        $points = -$points;
        _userpoints_update_points($points, $node->uid, "op=$op type=".$node->type);
      }
      break;

  }
}

function userpoints_comment($op, $comment) {
  global $user;

  $points = variable_get('userpoints_post_comment', '1');
  switch($op) {
    case 'insert':
      _userpoints_update_points($points, $user->uid, 'comment '.$op);
      break;
    case 'delete':
      $points = -$points;
      _userpoints_update_points($points, $comment->uid, 'comment '.$op);
      break;
    case 'moderate':
      $points = variable_get('userpoints_moderate_comment', '1');
      _userpoints_update_points($points, $comment->uid, 'comment '.$op);
      break;
  }
}

function userpoints_nodevote($nid) {
  global $user;
  $points = variable_get('userpoints_nodevote', '1');
  _userpoints_update_points($points, $user->uid, 'nodevote');
}

function userpoints_invite($uid, $op) {
  switch($op) {
    case 'invite':
      $points = variable_get('userpoints_invite_invite', '1');
      break;
    case 'register':
      $points = variable_get('userpoints_invite_register', '1');
      break;
  }
  _userpoints_update_points($points, $uid, $op);
}

function _userpoints_update_points($new_points = 0, $uid = 0, $info = '') {

  if ($uid == 0) {
    // anonymous users do not get points
    return;
  }

  $user = user_load(array('uid'=>$uid));

  if ($new_points <= 0) {
    $msg = t('lost');
  }
  else {
    $msg = t('earned');
  }

  $points = (int)$new_points + (int)_userpoints_get_current_points($uid);

  drupal_set_message(t('User %uname %op %points points! Total now is %total points.',
    array(
      '%uname'  => $user->name,
      '%op'     => $msg,
      '%points' => abs($new_points),
      '%total'  => $points)));

  if (_userpoints_user_exists($uid)) {
    db_query("UPDATE {userpoints} SET points = '%d', last_update = '%d' WHERE uid = %d",
      $points, time(), $uid);
  }
  else {
    $result = db_query("INSERT INTO {userpoints} VALUES ('%d', '%d', '%d')",
      $uid, $points, time());
  }
}

function _userpoints_user_exists($uid) {
  return (int)db_result(db_query('SELECT COUNT(*) FROM {userpoints} WHERE uid = %d', $uid));
}

function _userpoints_get_current_points($uid) {
  return (int)db_result(db_query('SELECT points FROM {userpoints} WHERE uid = %d', $uid));
}

function userpoints_ecommerceapi($data, $op) {
  switch($op) {
    case 'on payment completion':
      $multiplier = (int)variable_get('userpoints_ec_buy', 1);

      $uid = $data['uid'];
      $points = $multiplier * $data['gross'];
      $payment_status = $data['payment_status'];

      if ($payment_status == payment_get_status_id('completed')) {
        // Payment completed
        if ($uid) {
          // User id from the transaction
          if ($points) {
            // 
            if ($data['payment_method'] != 'userpoints') {
              // We cannot use points to purchase points. It does not make sense!
              _userpoints_update_points($points, $uid);
            }
          }
        }
      }
    break;
  }
}

function userpoints_paymentapi(&$txn, $op, $arg = '') {
  global $user;
  $uid = $user->uid;

  $edit = $_POST['edit'];

  if (!variable_get('userpoints_ec_payment', 0)) {
    return;
  }

  $multiplier = (int)variable_get('userpoints_ec_sell', 1);
  $min = variable_get('userpoints_min_purchase', '5.00');

  switch ($op) {
    case 'display name':
      return t('User Points');

    case 'on checkout':
      $gross = $edit['gross'];
      $points = ($gross / $multiplier);

      if ($points < $min) {
        form_set_error('gross', t('Minimum points for purchase is %min', array('%min' => $min)));
      }

      $balance = _userpoints_get_current_points($uid);
      if ($balance < $points) {
        form_set_error('gross', t('You do not have enough points for this purchase'));
      }
      break;

    case 'payment page':
      $gross = $edit['gross'];
      $points = ($gross / $multiplier);

      // Check the user's balance
      $balance = _userpoints_get_current_points($uid);
      if ($balance >= $points) {

        $txnid = $txn['txnid'];
        // Check if we have a transaction ID
        if ($txnid) {
          // User has sufficient balance
          _userpoints_update_points(-$points, $uid);

          // Check if we have shippable items
          $has_shippable_item = false;
          foreach($txn['item'] as $key => $value) {
            if (product_is_shippable($key['nid'])) {
              $has_shippable_item = true;
            }
          }

          // If there are no shippable items, then push workflow to completion
          if (!$has_shippabale_item) {
            $edit['workflow'] = 6;
          }

          // Setup payment to completed
          $edit['payment_status'] = payment_get_status_id('completed');
          $edit['txnid'] = $txn['txnid'];
          // Update the transaction
          $result = store_transaction_save($edit);

          if ($result) {
            // Send an email notification
            store_send_invoice_email($txnid);
          }
        }
      }
      break;
  }
}

