<?php

//$Id$

// Copyright 2005 Khalid Baheyeldin http://2bits.com

function userpoints_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      $output = t('Users earn points as they post articles, images, comments, and vote on nodes');
      break;
    case 'admin/settings/userpoints':
      $output = t('Users earn points as they post articles, images, comments, and vote on nodes');
      break;
  }

  return $output;
}
  
function userpoints_menu($may_cache) {
  $items = array();

  $items[] = array(
    'path'     => '',
    'callback' => '',
    'title'    => t('userpoints view'),
    'access'   => user_access('view userpoints'),
    'type'     => MENU_CALLBACK);

   return $items;
}

function userpoints_perm() {
  return array ('view userpoints', 'use userpoints');
}

function userpoints_settings() {
  
  $output .= form_textfield ('Points for posting an image', 'userpoints_post_image',
    variable_get('userpoints_post_image', '1'), 5, 5);

  $output .= form_textfield ('Points for posting a page', 'userpoints_post_page',
    variable_get('userpoints_post_page', '1'), 5, 5);

  $output .= form_textfield ('Points for posting a story', 'userpoints_post_story',
    variable_get('userpoints_post_story', '1'), 5, 5);

  $output .= form_textfield ('Points for posting a blog entry', 'userpoints_post_blog',
    variable_get('userpoints_post_blog', '1'), 5, 5);

  $output .= form_textfield ('Points for posting a forum topic', 'userpoints_post_forum',
    variable_get('userpoints_post_forum', '1'), 5, 5);

  $output .= form_textfield ('Points for posting a comment', 'userpoints_post_comment',
    variable_get('userpoints_post_comment', '1'), 5, 5);

  $output .= form_textfield ('Points for voting on a node', 'userpoints_nodevote',
    variable_get('userpoints_nodevote', '1'), 5, 5);

  $form= form_group(t('Points for each event'), $output);

  return $form;
}  

function userpoints_user($op) {
  switch($op) {
    case 'delete':
      db_query('DELETE FROM {userpoints} WHERE uid = %d', $user->uid);
      break;
  }
}

function userpoints_block($op = 'list', $delta = 0, $edit = array()) {

  global $user;

  $num = 5;

  $block_title = array();
  $block_title[] = t('User Points');
  $block_title[] = t('Highest Users');

  switch ($op) {
    case 'list':
      $blocks[0]['info'] = $block_title[0];
      $blocks[1]['info'] = $block_title[1];
      return $blocks;

    case 'view':
      if (user_access('view userpoints')) {
        switch ($delta) {
          case 0:
            $title = $block_title[$delta];
            if ($user->uid) {
              $points = (int) db_result(db_query('SELECT points FROM {userpoints} WHERE uid = %d', $user->uid));
              $content = t('You have: %point-count', array('%point-count' => format_plural($points, '1 point', '%count points')));
            }
            else {
              $content = t('Points are visible to logged in users only');
            }
            break;

          case 1:
            $title = $block_title[$delta];
            $result = db_query_range('SELECT p.uid, u.name, p.points FROM {userpoints} p, {users} u WHERE u.uid = p.uid GROUP BY p.uid ORDER BY p.points DESC', 0, $num);
            while ($data = db_fetch_object($result)) {
              $rows[] =
                array(
                  array('data' => l($data->name, 'user/' . $data->uid)),
                  array('data' => $data->points, 'align' => 'right'));
            }
            $header = array(t('user'), t('points'));
            $content = theme('table', $header, $rows);
            break;
        }

        $block['subject'] = $title;
        $block['content'] = $content;

        return $block;
      }
  }
}

function userpoints_page() {
  global $user;
  $edit = $_POST['edit'];

  print theme('page', $o);
}

function userpoints_nodeapi(&$node, $op, $teaser, $page) {
  global $user;

  switch($node->type) {
    case 'image':
    case 'story':
    case 'page':
    case 'forum':
    case 'blog':
      $points = variable_get('userpoints_post_' . $node->type, '1');
      switch($op) {
        case 'insert':
          $points = $points;
          _userpoints_update_points($points, "op=$op type=".$node->type);
          break;
        case 'delete':
          $points = -$points;
          _userpoints_update_points($points, "op=$op type=".$node->type);
          break;
      }
      break;
    default:
      // Node type is not defined, log a message
      watchdog('userpoints',
        t('Node type "%type" not configured in userpoints module',
        array('%type' => $node->type)));
      break;
    }
}

function userpoints_comment($op, $comment) {
  $points = variable_get('userpoints_post_comment', '1');
  switch($op) {
    case 'insert':
      _userpoints_update_points($points, 'comment');
      break;
    case 'delete':
      $points = -$points;
      _userpoints_update_points($points, 'comment');
      break;
  }
}

function userpoints_nodevote($nid) {
  $points = variable_get('userpoints_nodevote', '1');
  _userpoints_update_points($points, 'nodevote');
}

function _userpoints_update_points($points = 0, $info = '') {
  global $user;

  // print "<br/>update_points: " . $info;

  $points = (int)$points;
  $new_points = $points + (int)_userpoints_get_current_points();

  if (_userpoints_user_exists()) {
    db_query("UPDATE {userpoints} SET points = '%d', last_update = '%d' WHERE uid = %d",
      $new_points, time(), $user->uid);
  }
  else {
    $result = db_query("INSERT INTO {userpoints} VALUES ('%d', '%d', '%d')",
      $user->uid, $new_points, time());
  }
}

function _userpoints_user_exists() {
  global $user;

  $r = db_result(db_query('SELECT COUNT(*) FROM {userpoints} WHERE uid = %d', $user->uid));

  return $r;
}

function _userpoints_get_current_points() {
  global $user;

  return db_result(db_query('SELECT points FROM {userpoints} WHERE uid = %d', $user->uid));
}

?>
